#properties related to unit testing and running at the command line go here
logging.level.root=INFO
logging.level.org.cloudfoundry=INFO
logging.level.org.springframework=INFO
logging.level.org.springframework.security=INFO
logging.level.com.ge=DEBUG
server.port=8184
spring.profiles.active=local

#if you are behind a corporate proxy/firewall and want to access Predix Cloud
#predix.oauth.proxyHost =put.your.proxyHost.here
#predix.oauth.proxyPort=put.your.proxyPort.here

#OAuth - please see predix-rest-client src/main/java/com/ge/predix/solsvc/restclient/config/OauthRestConfig.java for more info on oauth properties
# e.g. predix.oauth.issuerId.url=https://36492c1e-657c-4377-ac51-add963552460.predix-uaa.cloud.com/oauth/token
predix.oauth.issuerId.url=put.your.uaa.issuerId.here
#you may put client:secret as unencoded cleartext by setting predix.oauth.clientIdEncode=true
predix.oauth.clientIdEncode=false
predix.oauth.clientId=you.should.base64encode(put.your.clientId:put.your.clientSecret separated by a colon)   

#asset - get from VCAP env vars by binding an application to your asset instance e.g. cf bind-service <my-app> <my-asset>
#asset - see asset-bootstrap - src/main/java/com/ge/predix/solsvc/bootstrap/ams/common/AssetRestConfig.java for more info on asset properties 
predix.asset.restHost=put.your.asset.service.instance.name.hostname.here
predix.asset.zoneid=put.your.asset.zoneid

#used by predix uaa-token-lib
trustedIssuerIdsRegexPattern=^https://(.*\\.)?predix-uaa.change.to.predix.env.here/oauth/token$

#used by predix acs-spring-security-extensions
accessTokenEndpointUrl=put.your.uaa.issuer.uri.here
acsServiceInstanceName=put.your.acs.instance.name.here
clientId=put.your.clientId
clientSecret=put.your.clientSecret
acsUri=put.your.acs.uri.here
acsZone=put.your.acs.zone.here
acsPolicyEvaluationTokenScope=put.your.acs.token.scope.here
